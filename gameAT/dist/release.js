!function(e){var t={};function s(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},s.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);class r{constructor(e){this.health=100,this.redraw=this.redraw.bind(this),this.updateBlink=this.updateBlink.bind(this),this.updateBreath=this.updateBreath.bind(this),this.blink=this.blink.bind(this),this.drawEllipse=this.drawEllipse.bind(this),this.canvas=e,this.context=this.canvas.getContext("2d"),this.images={},this.totalResources=6,this.numResourcesLoaded=0,this.fps=30,this.charX=10,this.charY=100,this.x=this.charX,this.y=this.charY,this.breathInc=.1,this.breathDir=1,this.breathAmt=0,this.breathMax=2,this.breathInterval=setInterval(this.updateBreath,1e3/this.fps),this.maxEyeHeight=14,this.curEyeHeight=this.maxEyeHeight,this.eyeOpenTime=0,this.timeBtwBlinks=4e3,this.blinkUpdateTime=200,this.blinkTimer=setInterval(this.updateBlink,this.blinkUpdateTime),this.initMonster()}initMonster(){this.createName(),this.face=this.randomInteger(1,4),this.torso=this.randomInteger(1,4),this.leftArm=this.randomInteger(1,4),this.rightArm=this.randomInteger(1,4),this.legs=this.randomInteger(1,4),this.weapon=this.randomInteger(1,4),this.loadImage("larm"+this.leftArm),this.loadImage("legs"+this.legs),this.loadImage("torso"+this.torso),this.loadImage("rarm"+this.rightArm),this.loadImage("face"+this.face),this.loadImage("weapon"+this.weapon)}randomInteger(e,t){let s=e-.5+Math.random()*(t-e+1);return s=Math.round(s)}createName(){this.monsterName=["Большой","Круглый","Огромный","Злобный","Абыкакой"][this.randomInteger(0,4)]+" "+["Липкий","Мятный","Вкусный","Ледяной","Ментоловый"][this.randomInteger(0,4)]+" "+["Дворецкий","Карачун","Бурзун","Ликвач","Мордач"][this.randomInteger(0,4)],document.getElementById("hMonsterName").innerText=this.monsterName}loadImage(e){this.images[e]=new Image,this.images[e].onload=(()=>{this.resourceLoaded()}),this.images[e].src="images/monster/"+e+".png"}resourceLoaded(){this.numResourcesLoaded+=1,this.numResourcesLoaded===this.totalResources&&setInterval(this.redraw,1e3/this.fps)}redraw(){canvasForMonster.width=canvasForMonster.width,this.context.drawImage(this.images["larm"+this.leftArm],this.x+0,this.y-42-this.breathAmt),this.context.drawImage(this.images["legs"+this.legs],this.x,this.y-60),this.context.drawImage(this.images["torso"+this.torso],this.x,this.y-50),this.context.drawImage(this.images["face"+this.face],this.x-10,this.y-70-this.breathAmt),this.context.drawImage(this.images["weapon"+this.weapon],this.x-0,this.y-50-this.breathAmt),this.context.drawImage(this.images["rarm"+this.rightArm],this.x+10,this.y-42-this.breathAmt),this.drawEllipse(this.x+110,this.y+75-this.breathAmt,8,this.curEyeHeight),this.drawEllipse(this.x+199,this.y+75-this.breathAmt,8,this.curEyeHeight)}drawEllipse(e,t,s,r){this.context.beginPath(),this.context.moveTo(e,t-r/2),this.context.bezierCurveTo(e+s/2,t-r/2,e+s/2,t+r/2,e,t+r/2),this.context.bezierCurveTo(e-s/2,t+r/2,e-s/2,t-r/2,e,t-r/2),this.context.fillStyle="black",this.context.fill(),this.context.closePath()}updateBreath(){1===this.breathDir?(this.breathAmt-=this.breathInc,this.breathAmt<-this.breathMax&&(this.breathDir=-1)):(this.breathAmt+=this.breathInc,this.breathAmt>this.breathMax&&(this.breathDir=1))}updateBlink(){this.eyeOpenTime+=this.blinkUpdateTime,this.eyeOpenTime>=this.timeBtwBlinks&&this.blink()}blink(){this.curEyeHeight-=1,this.curEyeHeight<=0?(this.eyeOpenTime=0,this.curEyeHeight=this.maxEyeHeight):setTimeout(this.blink,10)}}class n{constructor(e,t=1){this.canvas=e,this.context=this.canvas.getContext("2d"),this.pos=[0,0],this.start_pos=10,this.size=[420,266],this.speed=1,this.frames=[0,0,1,2,3,4],this._index=0,this.dir="horizontal",this.once=!0,this.spellSprite=new Image,this.spellSprite.src="images/waterBallsprite.png",2==t&&(this.spellSprite.src="images/fireBallsprite.png"),3==t&&(this.spellSprite.src="images/slimeBallsprite.png"),4==t&&(this.spellSprite.src="images/lightningBallsprite.png"),5==t&&(this.spellSprite.src="images/plazmaBallsprite.png"),6==t&&(this.spellSprite.src="images/monsterspell.png",this.start_pos=400,this._index=5,this.speed=-1),this.render=this.render.bind(this),this.update=this.update.bind(this),this.context.scale(-1,1);let s=setInterval(()=>{this.update(1),this.render(this.context),Math.abs(this._index)>5&&clearInterval(s)},100)}update(e){this._index+=this.speed*e}render(e){let t;this.canvas.width=this.canvas.width;let s=this.frames.length,r=Math.abs(Math.floor(this._index));if(t=this.frames[r%s],this.once&&r>=s)return void(this.done=!0);let n=this.pos[0],i=this.pos[1];"vertical"==this.dir?i+=t*this.size[1]:n+=t*this.size[0],e.drawImage(this.spellSprite,n,i,this.size[0],this.size[1],this.start_pos+100*this._index-100,200,this.size[0]/2,this.size[1]/2)}}class i{constructor(e,t){this.canvas=e,this.callback=t,this.context=this.canvas.getContext("2d"),this.pos=[0,0],this.size=[40,50],this.speed=1,this.frames=[0,1,2,3,4,5,6,7],this._index=0,this.url="images/spriteFinn.png",this.dir="horizontal",this.once=!1,this.heroSprite=new Image,this.heroSprite.src="images/spriteFinn.png",this.render=this.render.bind(this),this.update=this.update.bind(this);let s=setInterval(()=>{this.update(1),this.render(this.context),this._index>40&&(clearInterval(s),t())},100)}initeHero(){this._index=0;let e=setInterval(()=>{this.update(1),this.render(this.context),this._index>40&&(clearInterval(e),this.callback())},100)}update(e){this._index+=this.speed*e}render(e){let t;if(this.canvas.width=this.canvas.width,this.speed>0){let e=this.frames.length,s=Math.floor(this._index);if(t=this.frames[s%e],this.once&&s>=e)return void(this.done=!0)}else t=0;let s=this.pos[0],r=this.pos[1];"vertical"==this.dir?r+=t*this.size[1]:s+=t*this.size[0],e.drawImage(this.heroSprite,s,r,this.size[0],this.size[1],10+10*this._index,200,3*this.size[0],3*this.size[1])}}var a={cat:["кот","кошка"],dog:["пес","собака"],milk:["молоко","молочный"],flat:["квартира","плоский"],house:["дом","здание"],bag:["мешок","сумка"],leg:["нога","ножка"],red:["красный","рыжий"],rat:["крыса","предатель"],bread:["хлеб","пища"],morning:["утро","начало"],white:["белый","прозрачный"],wheel:["колесо","круг"],whale:["кит","масса"],love:["любовь","дорогая"],hotel:["отель","гостиница"],smile:["улыбка","улыбаться"],beach:["пляж","отмель"],nose:["нос","аромат"],arm:["рука","рычаг"],end:["конец","окончание"],begin:["начинать","завязать"],bus:["автобус","шины"],car:["машина","автомобиль"],train:["поезд","состав"],sky:["небо","небеса"]};class o{constructor(e){this.results=e,this.table=this.createTable()}createTable(){let e=document.createElement("table");return e.append(this.createHeader(),this.createBody()),e}insertTable(){winnerResult.appendChild(this.table)}createHeader(){let e=document.createElement("thead"),t=document.createElement("tr");e.appendChild(t);for(let e=0;e<2;e++){let e=document.createElement("th");t.append(e)}return t.children[0].innerHTML="Имя героя",t.children[1].innerHTML="Сколько монстров ты победил",e}createBody(){let e=document.createElement("tbody");this.results=JSON.parse(localStorage.ATtop5);for(let t=0;t<5;t++){let s=document.createElement("tr");e.appendChild(s);for(let e=0;e<2;e++){let e=document.createElement("td");s.appendChild(e)}this.results[t]&&(s.children[0].innerHTML=this.results[t].atname?this.results[t].atname:"",s.children[1].innerHTML=this.results[t].atscore)}return e}}class d{constructor(e,t,s){this.answerfield=e,this.task=t,this.words=s,this.renderTask()}checker(e){this.task.classList+="true"==e?" correct":" wrong"}renderTask(){this.answerfield.value="",this.answerExtraWords=Object.keys(this.words)[Math.floor(Math.random()*Object.keys(this.words).length)],this.wordTaskExtraWordsArray=this.words[this.answerExtraWords],this.task.innerText=this.wordTaskExtraWordsArray.join(" ")}}var l={"дикобраз":"Ёжик вырос в десять раз, получился …","ежик":"В клубок свернётся, а взять не даётся.","бегемот":"У него огромный рот, щн зовется …","белка":"По деревьям скок-скок, а орешки щёлк-щёлк.","верблюд":"Зверь я горбатый, а нравлюсь ребятам","ежик":"Ползун ползёт, иголки везёт.","ежик":"Под соснами, под ёлками лежит мешок с иголками.","жираф":"Какое животное очень красивое, самое высокое, самое длинное?","зебра":"Надели коняшки морские рубашки.","корова":"Сама пестрая, ест зеленое, дает белое","кот":"Выгнул спинку он дугой, замяукал. Кто такой?","крокодил":"По реке плывёт бревно ох и злющее оно!","крокодил":"В реках Африки живёт злой зелёный пароход!","лиса":"У кого из зверей хвост пушистей и длинней?","медведь":"Летом по лесу гуляет, зимой в берлоге отдыхает.","мышка":"Маленький рост, длинный хвост, серая шубка, острые зубки"};var h={"красный":["еж","корова","заяц","красный","слон"],"бабочка":["поезд","самолет","вертолет","машина","бабочка"],"овал":["дом","овал","дворец","гараж","сарай"],"стрекоза":["стрекоза","окунь","карп","щука","лещ"],"дерево":["тюльпан","дерево","ромашка","василек","колокольчик"],"квадрат":["кошка","собака","квадрат","лошадь","корова"],"вторник":["май","вторник","июль","январь","сентябрь"],"май":["вторник","среда","воскресенье","понедельник","май"],"зима":["май","зима","октябрь","апрель","август"],"шар":["круг","овал","треугольник","квадрат","шар"],"книга":["стол","стул","книга","кровать","шкаф"]};var c={11:["1","3","5","7","9"],5:["10","9","8","7","6"],12:["2","4","6","8","10"],"-10":["0","-2","-4","-6","-8"],243:["1","3","9","27","81"],2:["1","2","1","2","1"],3:["27","20","7","13","10"],111111:["1","11","111","1111","11111"],8:["2","3","5","3","5"],14:["1","2","7","8","13"],7:["1","2","3","5","6"]};var u={"черный":["белый"],"холодный":["горячий"],"тяжелый":["легкий"],"тянуть":["толкать"],"низкий":["высокий"],"худой":["толстый"],"узкий":["широкий"],"глупый":["умный"],"ясный":["пасмурный"],"ночь":["день"],"грустный":["веселый"]};var m={"и":["ш...шка"],"о":["г...рячий"],"д":["ле..."],"в":["тра...ка"],"ф":["шар..."],"а":["к...рандаш"],"з":["у...кий"],"б":["ду..."],"г":["сне..."],"ь":["ноч..."],"ы":["ц...пленок"]};let w,g,p=0,k=0,y=0,f=1,T=0,x=1,E=[new Audio("sounds/spell1.wav"),new Audio("sounds/spell2.wav"),new Audio("sounds/spell3.wav"),new Audio("sounds/spell4.wav"),new Audio("sounds/spell5.wav"),new Audio("sounds/spell6.wav")];function v(e,t){return e>t?t:e}function I(){let e=document.getElementsByClassName("healthContainer")[0].offsetWidth;document.getElementById("monsterHealth").style.width=e-e/3*v(p,3)+"px",document.getElementById("heroHealth").style.width=e-e/3*v(k,3)+"px"}function b(e){setTimeout(function(){setTimeout(I,500),k!=T?(T=k,x=f,f=6):f=x;let t=document.getElementById("canvasForSpell");new n(t,f);E[f-1].play(),setTimeout(function(){if(p+k==5||3==p||3==k){if(p>k){document.getElementById("winner-window").classList.toggle("hide"),e.classList.toggle("hide"),y++}else{document.getElementById("gameover-window").classList.toggle("hide"),e.classList.toggle("hide");let t={atname:localStorage.firstNameInput,atscore:y};L.push(t),L.sort(S),L=L.slice(0,5),localStorage.ATtop5=JSON.stringify(L),y=0,function(){let e=document.getElementById("tableResults");e.innerHTML="";let t=new o(L);e.appendChild(t.createTable())}()}p=0,k=0,T=0,x=1,se.innerText="0",re.innerText="0",R.innerText="0",j.innerText="0",U.innerText="0",P.innerText="0",K.innerText="0",Q.innerText="0",C.innerText="0",O.innerText="0",oe.innerText="0",de.innerText="0",ue.innerText="0",me.innerText="0",ke.innerText="0",ye.innerText="0",Ee.innerText="0",ve.innerText="0",Se.innerText="0",Be.innerText="0",setTimeout(I,500)}},2e3)},500)}$(function(){$("#sortable").sortable(),$("#sortable").disableSelection()});let L=[];function S(e,t){return e.atscore<t.atscore?1:-1}function B(){document.getElementById("options-form").classList.toggle("hide")}function A(e){let t=document.createElement("div");t.className="errorMessage";let s=document.createTextNode(e);t.appendChild(s),document.querySelector("form.options-form").appendChild(t),setTimeout(function(){t.parentNode.removeChild(t)},1e3)}function M(){document.getElementById("window-spell").classList.toggle("hide")}function W(e){if("btnNewGameWinner"==e.target.getAttribute("id")){document.getElementById("winner-window").classList.toggle("hide")}if("btnNewGameGameover"==e.target.getAttribute("id")){document.getElementById("gameover-window").classList.toggle("hide")}w.initMonster(),g.initeHero()}void 0===localStorage.ATtop5&&(localStorage.ATtop5=JSON.stringify(L)),L=JSON.parse(localStorage.ATtop5),$(function(){$("#sortable").sortable(),$("#sortable").disableSelection()}),document.getElementById("btnNext").addEventListener("click",function(e){e.preventDefault(),document.getElementById("historyOfGameEvents").classList.toggle("hide"),B()}),document.getElementById("begin-btn").addEventListener("click",function(e){if(e.preventDefault(),!(""==document.getElementById("firstNameInput").value?(A("введи имя"),0):(localStorage.firstNameInput=document.getElementById("firstNameInput").value,""==document.getElementById("passwordInput").value?(A("введи пароль"),0):(localStorage.passwordInput=document.getElementById("passwordInput").value,1))))return;B(),document.getElementById("game-window").classList.toggle("hide");let t=document.getElementById("canvasForMonster");w=new r(t);let s=document.getElementById("canvasForHero");g=new i(s,M)}),document.querySelector(".modalWindowofTask").addEventListener("click",e=>{let t=e.target;if(t.classList.contains("taskMath")){let e=t.getAttribute("id");if("taskMath"==e){document.getElementById("window-taskMath").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=1}if("taskWordsAudio"==e){document.getElementById("window-taskWordsAudio").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=2}if("taskWordTranslate"==e){document.getElementById("window-taskWordTranslate").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=3}if("taskLettersShuffle"==e){document.getElementById("window-taskWordLettersShuffle").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=4}if("taskRandomMathOperation"==e){document.getElementById("window-taskMathRandomOperation").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=5}if("taskAnimalTasks"==e){document.getElementById("window-taskAnimalTasks").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=1}if("taskExtraWords"==e){document.getElementById("window-taskExtraWords").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=2}if("taskNextNumber"==e){document.getElementById("window-taskNextNumber").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=3}if("taskAntonym"==e){document.getElementById("window-taskAntonym").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=4}if("taskInputLetter"==e){document.getElementById("window-taskInputLetter").classList.toggle("hide"),document.getElementById("window-spell").classList.toggle("hide"),f=5}x=f}}),document.getElementById("btnNewGameWinner").addEventListener("click",W),document.getElementById("btnNewGameGameover").addEventListener("click",W);let q=document.querySelector(".WordLettersShuffle"),N=document.getElementById("btnCheckWord"),O=document.querySelector("#window-taskWordLettersShuffle .correct-ans"),C=document.querySelector("#window-taskWordLettersShuffle .wrong-ans"),H=new class{constructor(e,t,s){this.answerfield=e,this.task=t,this.words=s,String.prototype.shuffle=function(){let e=this.split("");for(let t=e.length-1;t>0;t--){let s=Math.floor(Math.random()*(t+1)),r=e[t];e[t]=e[s],e[s]=r}return e.join("")},this.renderTask()}checker(e){this.task.classList+="true"==e?" correct":" wrong"}renderTask(){sortable.innerHTML="",this.wordShuffle=Object.keys(this.words)[Math.floor(Math.random()*Object.keys(this.words).length)],this.shuffledWord=this.wordShuffle.shuffle(),Array.from(this.shuffledWord).forEach((e,t,s)=>{let r=document.createElement("LI");r.innerText=e,sortable.appendChild(r)})}}(null,q,a);N.addEventListener("click",e=>{let t=!1,s="";Array.from(sortable.getElementsByTagName("li")).forEach(e=>{s+=e.innerText}),(t=s==H.wordShuffle)?(H.checker("true"),p++,O.innerText=p):(H.checker("false"),k++,C.innerText=k),H.renderTask(),b(document.getElementById("window-taskWordLettersShuffle"))});let _=document.querySelector("#answerNumber"),z=document.querySelector(".task"),j=document.querySelector(".correct-ans"),R=document.querySelector(".wrong-ans"),F=new class{constructor(e,t){this.answerfield=e,this.task=t,this.renderTask()}checker(e){this.task.classList+="true"==e?" correct":" wrong"}renderTask(){this.answerfield.value="";let e=`${Math.floor(9*Math.random())+1} * ${Math.floor(9*Math.random())+1}`;this.task.innerText=e}}(_,z);_.addEventListener("keypress",e=>{if("Enter"==e.code&&""!=_.value){let e=z.innerText.split("*");(e=e[0]*e[1])==_.value?(F.checker("true"),p++,j.innerText=p):(F.checker("false"),k++,R.innerText=k),_.value="",F.renderTask(),b(document.getElementById("window-taskMath"))}});let G=document.querySelector("#answerMathRandomOperation"),D=document.querySelector(".MathRandomOperation"),P=document.querySelector("#window-taskMathRandomOperation .correct-ans"),U=document.querySelector("#window-taskMathRandomOperation .wrong-ans"),J=new class{constructor(e,t){this.answerfield=e,this.task=t,this.renderTask()}checker(e){this.task.classList+="true"==e?" correct":" wrong"}renderTask(){this.answerfield.value="";let e=Math.floor(8*Math.random())+1,t=Math.floor(8*Math.random())+1,s=[{sign:"+",method:function(e,t){return e+t}},{sign:"-",method:function(e,t){return e-t}},{sign:"*",method:function(e,t){return e*t}},{sign:"/",method:function(e,t){return e/t}}],r=Math.floor(Math.random()*s.length),n=e+" "+s[r].sign+" "+t+" =";this.answer=s[r].method(e,t),3==r&&(n=e*t+" / "+e+" =",this.answer=t),this.task.innerText=n}}(G,D);G.addEventListener("keypress",e=>{if("Enter"==e.code&&""!=G.value){G.value==J.answer?(J.checker("true"),p++,P.innerText=p):(J.checker("false"),k++,U.innerText=k),G.value="",J.renderTask(),b(document.getElementById("window-taskMathRandomOperation"))}});let X=document.querySelector("#answerWord"),Y=document.querySelector(".Word"),K=document.querySelector("#window-taskWordsAudio .correct-ans"),Q=document.querySelector("#window-taskWordsAudio .wrong-ans"),V=document.createElement("button");V.id="playAudio",V.textContent="Прослушай слово и запиши его",Y.appendChild(V);let Z=new class{constructor(e,t,s){this.answerfield=e,this.task=t,this.words=s,this.renderTask()}checker(e){this.task.classList+="true"==e?" correct":" wrong"}renderTask(){this.word=Object.keys(this.words)[Math.floor(Math.random()*Object.keys(this.words).length)]}}(null,Y,a);V.addEventListener("click",e=>{let t=new SpeechSynthesisUtterance(Z.word);t.lang="en-US",window.speechSynthesis.speak(t)}),X.addEventListener("keypress",e=>{if("Enter"==e.code&&""!=X.value){X.value.toLowerCase()==Z.word?(Z.checker("true"),p++,K.innerText=p):(Z.checker("false"),k++,Q.innerText=k),X.value="",Z.renderTask(),b(document.getElementById("window-taskWordsAudio"))}});let ee=document.querySelector("#answerWordTranslate"),te=document.querySelector(".WordTranslate"),se=document.querySelector("#window-taskWordTranslate .correct-ans"),re=document.querySelector("#window-taskWordTranslate .wrong-ans"),ne=new class{constructor(e,t,s){this.answerfield=e,this.task=t,this.words=s,this.renderTask()}checker(e){this.task.classList+="true"==e?" correct":" wrong"}renderTask(){this.answerfield.value="",this.wordTranslate=Object.keys(this.words)[Math.floor(Math.random()*Object.keys(this.words).length)],this.answerWordTranslateArray=this.words[this.wordTranslate],this.task.innerText=this.wordTranslate}}(ee,te,a);ee.addEventListener("keypress",e=>{if("Enter"==e.code&&""!=ee.value){let e=ee.value.toLowerCase();ne.answerWordTranslateArray.indexOf(e)>-1?(ne.checker("true"),p++,se.innerText=p):(ne.checker("false"),k++,re.innerText=k),ee.value="",ne.renderTask(),b(document.getElementById("window-taskWordTranslate"))}});let ie=document.querySelector("#answerTaskAnimalTasks"),ae=document.querySelector(".taskAnimalTasks"),oe=document.querySelector("#window-taskAnimalTasks .correct-ans"),de=document.querySelector("#window-taskAnimalTasks .wrong-ans"),le=new class{constructor(e,t,s){this.answerfield=e,this.task=t,this.words=s,this.renderTask()}checker(e){this.task.classList+="true"==e?" correct":" wrong"}renderTask(){this.answerfield.value="",this.answerWordTasksAnimalString=Object.keys(this.words)[Math.floor(Math.random()*Object.keys(this.words).length)],this.wordTasksAnimal=this.words[this.answerWordTasksAnimalString],this.task.innerText=this.wordTasksAnimal}}(ie,ae,l);ie.addEventListener("keypress",e=>{if("Enter"==e.code&&""!=ie.value){ie.value.toLowerCase()==le.answerWordTasksAnimalString?(le.checker("true"),p++,oe.innerText=p):(le.checker("false"),k++,de.innerText=k),ie.value="",le.renderTask(),b(document.getElementById("window-taskAnimalTasks"))}});let he=document.querySelector("#answerTaskExtraWords"),ce=document.querySelector(".taskExtraWords"),ue=document.querySelector("#window-taskExtraWords .correct-ans"),me=document.querySelector("#window-taskExtraWords .wrong-ans"),we=new d(he,ce,h);he.addEventListener("keypress",e=>{if("Enter"==e.code&&""!=he.value){let e=he.value.toLowerCase();we.wordTaskExtraWordsArray.indexOf(e)>-1?(we.checker("true"),p++,ue.innerText=p):(we.checker("false"),k++,me.innerText=k),he.value="",we.renderTask(),b(document.getElementById("window-taskExtraWords"))}});let ge=document.querySelector("#answerTaskNextNumber"),pe=document.querySelector(".taskNextNumber"),ke=document.querySelector("#window-taskNextNumber .correct-ans"),ye=document.querySelector("#window-taskNextNumber .wrong-ans"),fe=new d(ge,pe,c);ge.addEventListener("keypress",e=>{if("Enter"==e.code&&""!=ge.value){ge.value.toLowerCase()==fe.answerExtraWords?(fe.checker("true"),p++,ke.innerText=p):(fe.checker("false"),k++,ye.innerText=k),ge.value="",fe.renderTask(),b(document.getElementById("window-taskNextNumber"))}});let Te=document.querySelector("#answerTaskAntonym"),xe=document.querySelector(".taskAntonym"),Ee=document.querySelector("#window-taskAntonym .correct-ans"),ve=document.querySelector("#window-taskAntonym .wrong-ans"),Ie=new d(Te,xe,u);Te.addEventListener("keypress",e=>{if("Enter"==e.code&&""!=Te.value){Te.value.toLowerCase()==Ie.answerExtraWords?(Ie.checker("true"),p++,Ee.innerText=p):(Ie.checker("false"),k++,ve.innerText=k),Te.value="",Ie.renderTask(),b(document.getElementById("window-taskAntonym"))}});let be=document.querySelector("#answerTaskInputLetter"),Le=document.querySelector(".taskInputLetter"),Se=document.querySelector("#window-taskInputLetter .correct-ans"),Be=document.querySelector("#window-taskInputLetter .wrong-ans"),Ae=new d(be,Le,m);be.addEventListener("keypress",e=>{if("Enter"==e.code&&""!=be.value){be.value.toLowerCase()==Ae.answerExtraWords?(Ae.checker("true"),p++,Se.innerText=p):(Ae.checker("false"),k++,Be.innerText=k),be.value="",Ae.renderTask(),b(document.getElementById("window-taskInputLetter"))}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,